package com.yuralil.application.form;

import com.yuralil.domain.dao.ReportDao;
import com.yuralil.domain.entities.Report;
import com.yuralil.domain.enums.ReportType;
import com.yuralil.domain.service.ReportExcelService;
import com.yuralil.domain.service.ReportWordService;
import com.yuralil.infrastructure.util.ConnectionHolder;
import com.yuralil.infrastructure.util.ConnectionPool;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;

import java.io.FileOutputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.time.LocalDateTime;
import java.util.List;

/**
 * –§–æ—Ä–º–∞ JavaFX –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–≤—ñ—Ç—ñ–≤ —É —Å–∏—Å—Ç–µ–º—ñ.
 * <p>
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î:
 * <ul>
 *     <li>–í–∏–±—ñ—Ä —Ç–∏–ø—É –∑–≤—ñ—Ç—É (DOCX/Excel)</li>
 *     <li>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ –±–∞–∑—É</li>
 *     <li>–í–∏–≤—ñ–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≤—ñ—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</li>
 * </ul>
 */
public class ReportGeneratorForm extends VBox {

    private final ComboBox<ReportType> reportTypeComboBox;
    private final Label statusLabel;
    private final VBox reportList;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ–æ—Ä–º—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤.
     */
    public ReportGeneratorForm() {
        setSpacing(30);
        setPadding(new Insets(30));
        setAlignment(Pos.TOP_CENTER);
        setMaxWidth(Double.MAX_VALUE);

        Text title = new Text("üìë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É");
        title.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

        reportTypeComboBox = new ComboBox<>();
        reportTypeComboBox.getItems().addAll(ReportType.values());
        reportTypeComboBox.setPromptText("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É");

        Button generateBtn = new Button("üõ† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏");
        statusLabel = new Label();
        reportList = new VBox(10);
        reportList.setPadding(new Insets(10));

        generateBtn.setOnAction(e -> generateReport());

        VBox section = new VBox(10, reportTypeComboBox, generateBtn, statusLabel);
        section.setAlignment(Pos.CENTER);

        Separator separator = new Separator();
        Text historyTitle = new Text("üóÇ –Ü—Å—Ç–æ—Ä—ñ—è –∑–≤—ñ—Ç—ñ–≤:");
        historyTitle.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        getChildren().addAll(title, section, separator, historyTitle, reportList);

        loadReportHistory();
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ –±–∞–∑—É.
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ {@link ReportType}.
     */
    private void generateReport() {
        ReportType selectedType = reportTypeComboBox.getValue();
        if (selectedType == null) {
            statusLabel.setText("‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É!");
            return;
        }

        try (Connection conn = new ConnectionPool().getConnection()) {
            ConnectionHolder.set(conn);

            byte[] content;
            if (selectedType == ReportType.EXHIBIT_DESCRIPTION) {
                content = new ReportWordService().generate();
            } else {
                content = new ReportExcelService().generate();
            }

            Report report = new Report();
            report.setType(selectedType);
            report.setGeneratedAt(LocalDateTime.now());
            report.setContent(content);

            ReportDao.getInstance().insert(report);
            statusLabel.setText("‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—É!");
            loadReportHistory();

        } catch (Exception ex) {
            statusLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É.");
            ex.printStackTrace();
        } finally {
            ConnectionHolder.clear();
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–≤—ñ—Ç—ñ–≤ —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —ó—Ö.
     * –ö–æ–∂–µ–Ω –∑–≤—ñ—Ç –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚¨á –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏".
     */
    private void loadReportHistory() {
        reportList.getChildren().clear();

        try (Connection conn = new ConnectionPool().getConnection()) {
            ConnectionHolder.set(conn);
            List<Report> reports = ReportDao.getInstance().findAll();

            for (Report report : reports) {
                HBox item = new HBox(10);
                item.setAlignment(Pos.CENTER_LEFT);

                Label info = new Label("üìÑ " + report.getType() + " | " + report.getGeneratedAt());
                Button downloadBtn = new Button("‚¨á –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏");

                downloadBtn.setOnAction(e -> {
                    FileChooser chooser = new FileChooser();
                    chooser.setInitialFileName("report_" + report.getType().name().toLowerCase());
                    if (report.getType() == ReportType.EXHIBIT_DESCRIPTION) {
                        chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Word (*.docx)", "*.docx"));
                    } else {
                        chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Excel (*.xlsx)", "*.xlsx"));
                    }

                    var file = chooser.showSaveDialog(getScene().getWindow());
                    if (file != null) {
                        try (FileOutputStream out = new FileOutputStream(file)) {
                            out.write(report.getContent());
                        } catch (Exception ex) {
                            new Alert(Alert.AlertType.ERROR, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.").showAndWait();
                        }
                    }
                });

                item.getChildren().addAll(info, downloadBtn);
                reportList.getChildren().add(item);
            }

        } catch (Exception e) {
            reportList.getChildren().add(new Label("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó."));
            e.printStackTrace();
        } finally {
            ConnectionHolder.clear();
        }
    }
}
